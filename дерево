using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace lthtdj
{
    static class Program
    {
        /// <summary>
        /// Главная точка входа для приложения.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lthtdj
{
    public class Node
    {
        public int key;
        public Node left;
        public Node right;

        public Node(int x)
        {
            key = x;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lthtdj
{
    public class Pole
    {
        Graphics g;
        public int count = 0;
        public Pole(Graphics h)
        {
            g = h;
        }
        public void show(string text, int level, Graphics g, int nu)
        {
            Font f = new Font("Times New Roman", 12.0f);

            if (level == 1)
            {
                g.DrawString(text, f, Brushes.Red, 300, 25);          
            }
            else
            {       
                g.DrawString(text, f, Brushes.Red, 295 + nu, 2 + 24 * level);
            }

        }
    }
}

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lthtdj
{
    public class Derevo
    {
        public int put = 0;
        public Node root;
        public int u = 1;
        public int Insert(int x)
        {
            u = 1;
            put = 0;
            if (root == null)
                root = new Node(x);
            else
            {
                u = insert(root, x);

            }

            return u;
        }
        private int insert(Node p, int x)
        {

            u++;
            if (x < p.key)
            {
                put -= 295 / u;
                if (p.left == null)
                {
                    p.left = new Node(x);

                }
                else
                {

                    insert(p.left, x);

                }

            }
            else
            {

                put += 295 / u;
                if (p.right == null)
                {
                    p.right = new Node(x);

                }
                else
                {

                    insert(p.right, x);
                }

            }
            return u;

        }
        
        public int GetMaxRec()
        {
            if (root != null)
                return findMax(root).key;
            else
                return -1;
        }
        private Node findMax(Node p)
        {
            return p.right != null ? findMax(p.right) : p;
        }
        public void ChangeTree()
        {
            root = buildTree(root);
        }
        private Node buildTree(Node p)
        {
            var nodes = new List<Node>();
            store(p, nodes);
            return build_from_nodes(nodes, 0, nodes.Count - 1);
        }
        private void store(Node p, List<Node> nodes)
        {
            if (p == null)
                return;
            store(p.left, nodes);
            nodes.Add(p);
            store(p.right, nodes);
        }
        private Node build_from_nodes(List<Node> nodes, int start, int end)
        {
            if (start > end)
                return null;
            int mid = (start + end) / 2;
            Node p = nodes[mid];
            p.left = build_from_nodes(nodes, start, mid - 1);
            p.right = build_from_nodes(nodes, mid + 1, end);
            return p;
        }

        public int Height()
        {
            return height(root);
        }
        private int height(Node p)
        {
            if (p == null)
                return 0;
            return 1 + Math.Max(height(p.left), height(p.right));
        }
        
        public void Print2()
        {
            Console.WriteLine(tostr(root));
        }
        private string tostr(Node p)
        {
            if (p == null)
                return "\n";
            return "";
        }
    }

}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace lthtdj
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        int c = 0;
        Graphics g;
        string date;
        Derevo tree = new Derevo();
        public const int coord1 = 30;
        public const int coord2 = 30;
        public string text;

        private void Form1_Load(object sender, EventArgs e)
        {
            g = panel1.CreateGraphics();

        }

        private void Button1_Click(object sender, EventArgs e)
        {
            date = textBox1.Text;
            textBox1.Clear();
            c++;
            int level = tree.Insert(Convert.ToInt32(date));
            int put = tree.put;
            Pole a = new Pole(g);
            a.show(date, level, g, put);
        }
    }
}
