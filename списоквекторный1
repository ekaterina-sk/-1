using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace св1
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1<int> g = new Class1<int>(7);
            for (int i = 0; i < 6; i++)
            {
                g.Add(i);
            }
            g.RemoveAt(3);                      
            foreach (var i in g)
            {
                Console.Write(i);
            }
            Console.WriteLine();         
           
        }
    }
}

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace св1
{
    class Class1<T> : IEnumerable<T>
    {
        public int r = 0;
        public int number = 0;
        public int help = -1;
        private T[] array;
        public int count
        {
            get;
            private set;
        }

        public Class1(int length)
        {
            try
            {
                array = new T[length];
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public int Size()
        {
            return count;
        }
        public void Add(T element)
        {            
            try
            {
                array[count] = element;
                count++;
            }
            catch (IndexOutOfRangeException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public void Insert(T element, int place)
        {
            if (count == 0 || place >= count - 1)
            {
                array[count] = element;
            }
            else
            {
                T[] new_arr = new T[Size() + 1];
                // Array.Copy(array, place, new_arr, 0, count);
                for (int i = place; i != Size(); i++)
                {
                    new_arr[i + 1] = array[i];
                }
                for (int i = 0; i < place; i++)
                {
                    new_arr[i] = array[i];
                }
                new_arr[place] = element;
                array = new_arr;
                count++;
            }


        }
        public void RemoveAt(int place)
        {
            for (int i = place; i != Size(); i++)
            {
                array[i] = array[i + 1];
            }
            array[count] = default(T);
            count--;
        }
        public T Last()
        {
            return array[count - 1];
        }
        public T First()
        {
            return array[0];
        }
        public void Clear()
        {
            count = 0;
        }
        public void Foreach(System.Action<T> action)
        {
            for (int i = 0; i != Size(); ++i)
            {
                action(array[i]);
            }
        }
        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < Size(); i++)
            {
                yield return array[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
