using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace св2
{
    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace св2
{
    class Class1<T> : IEnumerable
    {
        public int c2 = 0;
        public int number = 0;
        private T[] array;
        public int count
        {
            get;
            private set;
        }

        public Class1(int length)
        {
            try
            {
                array = new T[length];
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public int Size()
        {
            return count;
        }
        public void Add(T element)
        {
            //if (count > 0)
            //{
            //    array[count] = element;
            //    count++;
            //}
            try
            {
                array[count] = element;
                count++;
            }
            catch (IndexOutOfRangeException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public void Insert(T element, int place)
        {
            if (count == 0 || place >= count - 1)
            {
                array[count] = element;

            }
            else
            {
                T[] new_arr = new T[Size() + 1];
                // Array.Copy(array, place, new_arr, 0, count);
                for (int i = place; i != Size(); i++)
                {
                    new_arr[i + 1] = array[i];
                }
                for (int i = 0; i < place; i++)
                {
                    new_arr[i] = array[i];
                }
                new_arr[place] = element;
                array = new_arr;
                count++;
            }
        }
        public void Insert2(T element, int place)
        {
            c2++;
            if (count == 0 || place >= count - 1)
            {
                array[count] = element;
                number++;
            }
            else
            {
                for (int i = Size(); i != place; i--)
                {
                    array[i] = array[i - 1];
                    number++;
                }
                array[place] = element;
                count++;
            }
            // return number;
        }
        public void RemoveAt(int place)
        {
            for (int i = place; i != Size(); i++)
            {
                array[i] = array[i + 1];
            }
            array[count] = default(T);
            count--;
        }
        public T Last()
        {
            return array[count - 1];
        }
        public T First()
        {
            return array[0];
        }
        public void Clear()
        {
            count = 0;
        }
        public T this[int i]
        {
            get
            {
                return array[i];
            }
            set
            {
                array[i] = value;
            }

        }
        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < Size(); i++)
            {
                yield return array[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace св2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }


        int n = 0;
        int n_try = 0;
        int seed = 0;

        Random rnd = new Random();

        private void Form1_Load(object sender, EventArgs e)
        {

        }

      
        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            n = Convert.ToInt32(textBox1.Text);
            n_try = Convert.ToInt32(textBox2.Text);
            seed = Convert.ToInt32(textBox3.Text);
            Class1<double> allvalues = new Class1<double>(n_try + 1);
            // var allvalues = new System.Collections.Generic.List<int>();//result list
            for (int j = 0; j != n_try; j++)
            {
                var rnd = new System.Random(seed + j + 1);
                // var ml = new List<int>(n);
                Class1<int> ml = new Class1<int>(n + 1);
                for (int i = 0; i != n; i++)
                {
                    ml.Add(rnd.Next(0, n));
                }
                for (int i = 0; i != n; i++)//vctavka
                {
                    ml.RemoveAt(rnd.Next(0, ml.Size()));
                    ml.Insert2(rnd.Next(0, ml.Size()), rnd.Next(0, n));
                }
                double rez = (Convert.ToDouble(ml.number) + 1) / Convert.ToDouble(ml.c2);
                allvalues.Add(Convert.ToInt32(Math.Round(rez)));
                //allvalues.Add(rez);
            }
            double[] tochart = new double[n];
            for (int i = 0; i != n; i++)
            {
                tochart[i] = 0;
            }
            for (int i = 0; i != n_try; i++)
            {
                ++tochart[Convert.ToInt32(allvalues[i])];
                //tochart[i] = allvalues[i];
            }

            this.chart1.Series[0].Points.Clear();
            this.chart1.Series[0].SetDefault(true);
            this.chart1.Series[0].IsValueShownAsLabel = false;
            this.chart1.ChartAreas[0].AxisX.Minimum = 0;
            this.chart1.ChartAreas[0].AxisX.Maximum = n;

            for (int i = 0; i != n_try; i++)
            {
                this.chart1.Series[0].Points.Add(allvalues[i]);
            }
        }
    }
}
